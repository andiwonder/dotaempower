<script type="text/javascript">

  data = [{"hero":"Axe","pos":1},{"hero":"Bane","pos":2},{"hero":"Dazzle","pos":5}];

  var margin = {top: 30, right: 20, bottom: 30, left: 10},
      width = 2000 - margin.left - margin.right,
      height = 290 ;

  var parseDate = d3.time.format("%d-%b-%y").parse;

  var x = d3.time.scale()
    .domain([first_date, last_date])
    .rangeRound([0, width - margin.left - margin.right]);

  // var x = d3.scale.linear().domain([0,17]).range([0, width]);
  var y = d3.scale.linear().range([height, 0]);

  // Define the axes
  var xAxis = d3.svg.axis()
      .scale(x)
      // .tickFormat(function(d) { return dataset[d].Month; })
      .orient("bottom");

  function make_x_axis() {        
    return d3.svg.axis()
        .scale(x)
         .orient("bottom")
         .ticks(16)
  };

  function make_y_axis() {        
    return d3.svg.axis()
        .scale(y)
        .orient("left")
        .ticks(24)
  };

  var yAxis = d3.svg.axis().scale(y)
      .orient("left").ticks(5);

  // Define the line
  var valueline = d3.svg.line()
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.close); });

  var svg = d3.select("#d3_minimap_chart")
    .append("svg")
      .attr("fill","red")
      .attr("id","my_svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", 
              "translate(" + margin.left + "," + margin.top + ")");


  svg.append("text")      // text label for the x axis
    .attr("x", 265 )
    .attr("y", 480 )
    .style("text-anchor", "middle")
    .text("Date");

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)

var rectangle = svg.selectAll("rect").
                data(map_result);
  
    rectangle.enter()
    .append("svg:rect")              
              .attr("x", function(d,i){
                return (d.day * 60) - 20;
              })
              .attr("y", function(d,i){
                return (d.game_of_day * -30) + 290;
              })
              .attr("fill", function(d,i){
                if (d.win === true){
                  return "rgb(56,142,60)"
                }
                else {
                  return "rgb(229,28,35)"
                }
              })
              .attr("width", 28)
              .attr("height", 28);



  var imgs = svg.selectAll("img").
    data(map_result);
    imgs.enter()
    .append("svg:image")
    .attr("value", function (d,i){
      // console.log(d.id);
      return d.id;
    })
    .attr("class", "minimap_hero_icon_img")
    .attr("xlink:href", function (d,i) {
          return "https://d10bybrdwoa4y6.cloudfront.net/test/assets/icons/minimap_hero_icon/" + (_.invert(myheroes))[d.hero_id] + "_icon.png"
      })
    .attr("x", function (d,i) {
        return (d.day * 60) - 20;
      })
    .attr("y", function (d,i) {
        return (d.game_of_day * -30) + 290;
      })
    .attr("stroke","orange")
    .attr("width", "28")
    .attr("height", "28");

</script>
